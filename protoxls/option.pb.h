// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: option.proto

#ifndef PROTOBUF_option_2eproto__INCLUDED
#define PROTOBUF_option_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
class StoreScheme;
class StoreSchemeDefaultTypeInternal;
extern StoreSchemeDefaultTypeInternal _StoreScheme_default_instance_;

namespace protobuf_option_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_option_2eproto

// ===================================================================

class StoreScheme : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StoreScheme) */ {
 public:
  StoreScheme();
  virtual ~StoreScheme();

  StoreScheme(const StoreScheme& from);

  inline StoreScheme& operator=(const StoreScheme& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoreScheme(StoreScheme&& from) noexcept
    : StoreScheme() {
    *this = ::std::move(from);
  }

  inline StoreScheme& operator=(StoreScheme&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreScheme& default_instance();

  static inline const StoreScheme* internal_default_instance() {
    return reinterpret_cast<const StoreScheme*>(
               &_StoreScheme_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(StoreScheme* other);
  friend void swap(StoreScheme& a, StoreScheme& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoreScheme* New() const PROTOBUF_FINAL { return New(NULL); }

  StoreScheme* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StoreScheme& from);
  void MergeFrom(const StoreScheme& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StoreScheme* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string keys = 4;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 4;
  const ::std::string& keys(int index) const;
  ::std::string* mutable_keys(int index);
  void set_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_keys(int index, ::std::string&& value);
  #endif
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  ::std::string* add_keys();
  void add_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_keys(::std::string&& value);
  #endif
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // repeated bytes datas = 5;
  int datas_size() const;
  void clear_datas();
  static const int kDatasFieldNumber = 5;
  const ::std::string& datas(int index) const;
  ::std::string* mutable_datas(int index);
  void set_datas(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_datas(int index, ::std::string&& value);
  #endif
  void set_datas(int index, const char* value);
  void set_datas(int index, const void* value, size_t size);
  ::std::string* add_datas();
  void add_datas(const ::std::string& value);
  #if LANG_CXX11
  void add_datas(::std::string&& value);
  #endif
  void add_datas(const char* value);
  void add_datas(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& datas() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_datas();

  // string scheme = 2;
  void clear_scheme();
  static const int kSchemeFieldNumber = 2;
  const ::std::string& scheme() const;
  void set_scheme(const ::std::string& value);
  #if LANG_CXX11
  void set_scheme(::std::string&& value);
  #endif
  void set_scheme(const char* value);
  void set_scheme(const char* value, size_t size);
  ::std::string* mutable_scheme();
  ::std::string* release_scheme();
  void set_allocated_scheme(::std::string* scheme);

  // string hash = 3;
  void clear_hash();
  static const int kHashFieldNumber = 3;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // int64 magic = 1;
  void clear_magic();
  static const int kMagicFieldNumber = 1;
  ::google::protobuf::int64 magic() const;
  void set_magic(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:StoreScheme)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  ::google::protobuf::RepeatedPtrField< ::std::string> datas_;
  ::google::protobuf::internal::ArenaStringPtr scheme_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::int64 magic_;
  mutable int _cached_size_;
  friend struct protobuf_option_2eproto::TableStruct;
};
// ===================================================================

static const int kExcelFieldNumber = 1001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  excel;
static const int kSheetFieldNumber = 1002;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  sheet;
static const int kKeyFieldNumber = 1003;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  key;
static const int kOutputFieldNumber = 1004;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  output;
static const int kPrefixFieldNumber = 1005;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  prefix;
static const int kSuffixFieldNumber = 1006;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  suffix;
static const int kTextFieldNumber = 1001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  text;
static const int kCnameFieldNumber = 1001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  cname;

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StoreScheme

// int64 magic = 1;
inline void StoreScheme::clear_magic() {
  magic_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 StoreScheme::magic() const {
  // @@protoc_insertion_point(field_get:StoreScheme.magic)
  return magic_;
}
inline void StoreScheme::set_magic(::google::protobuf::int64 value) {
  
  magic_ = value;
  // @@protoc_insertion_point(field_set:StoreScheme.magic)
}

// string scheme = 2;
inline void StoreScheme::clear_scheme() {
  scheme_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoreScheme::scheme() const {
  // @@protoc_insertion_point(field_get:StoreScheme.scheme)
  return scheme_.GetNoArena();
}
inline void StoreScheme::set_scheme(const ::std::string& value) {
  
  scheme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StoreScheme.scheme)
}
#if LANG_CXX11
inline void StoreScheme::set_scheme(::std::string&& value) {
  
  scheme_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StoreScheme.scheme)
}
#endif
inline void StoreScheme::set_scheme(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scheme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StoreScheme.scheme)
}
inline void StoreScheme::set_scheme(const char* value, size_t size) {
  
  scheme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StoreScheme.scheme)
}
inline ::std::string* StoreScheme::mutable_scheme() {
  
  // @@protoc_insertion_point(field_mutable:StoreScheme.scheme)
  return scheme_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreScheme::release_scheme() {
  // @@protoc_insertion_point(field_release:StoreScheme.scheme)
  
  return scheme_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreScheme::set_allocated_scheme(::std::string* scheme) {
  if (scheme != NULL) {
    
  } else {
    
  }
  scheme_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scheme);
  // @@protoc_insertion_point(field_set_allocated:StoreScheme.scheme)
}

// string hash = 3;
inline void StoreScheme::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StoreScheme::hash() const {
  // @@protoc_insertion_point(field_get:StoreScheme.hash)
  return hash_.GetNoArena();
}
inline void StoreScheme::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StoreScheme.hash)
}
#if LANG_CXX11
inline void StoreScheme::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StoreScheme.hash)
}
#endif
inline void StoreScheme::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StoreScheme.hash)
}
inline void StoreScheme::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StoreScheme.hash)
}
inline ::std::string* StoreScheme::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:StoreScheme.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreScheme::release_hash() {
  // @@protoc_insertion_point(field_release:StoreScheme.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreScheme::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:StoreScheme.hash)
}

// repeated string keys = 4;
inline int StoreScheme::keys_size() const {
  return keys_.size();
}
inline void StoreScheme::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& StoreScheme::keys(int index) const {
  // @@protoc_insertion_point(field_get:StoreScheme.keys)
  return keys_.Get(index);
}
inline ::std::string* StoreScheme::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:StoreScheme.keys)
  return keys_.Mutable(index);
}
inline void StoreScheme::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:StoreScheme.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StoreScheme::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:StoreScheme.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StoreScheme::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StoreScheme.keys)
}
inline void StoreScheme::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StoreScheme.keys)
}
inline ::std::string* StoreScheme::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:StoreScheme.keys)
  return keys_.Add();
}
inline void StoreScheme::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StoreScheme.keys)
}
#if LANG_CXX11
inline void StoreScheme::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StoreScheme.keys)
}
#endif
inline void StoreScheme::add_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StoreScheme.keys)
}
inline void StoreScheme::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StoreScheme.keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StoreScheme::keys() const {
  // @@protoc_insertion_point(field_list:StoreScheme.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StoreScheme::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:StoreScheme.keys)
  return &keys_;
}

// repeated bytes datas = 5;
inline int StoreScheme::datas_size() const {
  return datas_.size();
}
inline void StoreScheme::clear_datas() {
  datas_.Clear();
}
inline const ::std::string& StoreScheme::datas(int index) const {
  // @@protoc_insertion_point(field_get:StoreScheme.datas)
  return datas_.Get(index);
}
inline ::std::string* StoreScheme::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:StoreScheme.datas)
  return datas_.Mutable(index);
}
inline void StoreScheme::set_datas(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:StoreScheme.datas)
  datas_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StoreScheme::set_datas(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:StoreScheme.datas)
  datas_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StoreScheme::set_datas(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  datas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StoreScheme.datas)
}
inline void StoreScheme::set_datas(int index, const void* value, size_t size) {
  datas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StoreScheme.datas)
}
inline ::std::string* StoreScheme::add_datas() {
  // @@protoc_insertion_point(field_add_mutable:StoreScheme.datas)
  return datas_.Add();
}
inline void StoreScheme::add_datas(const ::std::string& value) {
  datas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StoreScheme.datas)
}
#if LANG_CXX11
inline void StoreScheme::add_datas(::std::string&& value) {
  datas_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StoreScheme.datas)
}
#endif
inline void StoreScheme::add_datas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  datas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StoreScheme.datas)
}
inline void StoreScheme::add_datas(const void* value, size_t size) {
  datas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StoreScheme.datas)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StoreScheme::datas() const {
  // @@protoc_insertion_point(field_list:StoreScheme.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StoreScheme::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:StoreScheme.datas)
  return &datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_option_2eproto__INCLUDED
